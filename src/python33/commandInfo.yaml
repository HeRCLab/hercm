cat:
  argumentInfo: [The file to print all lines from]
  help: Prints all lines from the file
  optionalArguments: null
  requiredArguments:
  - [0, &id001 !!python/name:builtins.str '', path]
cd:
  argumentInfo: [new working directory]
  help: Changes the current working directory to path
  optionalArguments: null
  requiredArguments:
  - [0, *id001, path]
check-symmetry: {argumentInfo: null, help: "Checks the symmetry attribute of the matrix,\
    \ and whether \n                    or not the data in the matrix is actually\
    \ symmetrical", optionalArguments: null, requiredArguments: null}
check-tril: {argumentInfo: null, help: Prints whether or not there are nonzero elements
    in the lower triangle, optionalArguments: null, requiredArguments: null}
col:
  argumentInfo: [the row to display]
  help: Displays all elements in the specified column
  optionalArguments: null
  requiredArguments:
  - [0, &id002 !!python/name:builtins.int '', col]
convert:
  argumentInfo: [The path to the source file, the file format of the source file,
    the path to the destination file, the format of the destination file]
  help: "Reads the source file in the specified format, then writes it\n         \
    \       'back out at the specified destination in the destination \n         \
    \       format"
  optionalArguments: null
  requiredArguments:
  - [0, *id001, source]
  - [1, *id001, source format]
  - [2, *id001, destination]
  - [3, *id001, destination format]
csrdisplay:
  argumentInfo: [first row to display, last row to display]
  help: "Displays the matrix as raw CSR data, prompts if nzentries \n            >\
    \ 25.\n             if provided, will only display the CSR values between a particular\n\
    \             range of rows in the matrix"
  optionalArguments:
  - [0, *id002, rowStart]
  - [1, *id002, rowEnd]
  requiredArguments: null
display:
  argumentInfo: [maximum number of elemets to display vertically, maximum number of
      elements to display horizontally]
  help: "Displays a visualization of the matrix. If the matrix is \n             \
    \       very large, only the corners will be displayed"
  optionalArguments:
  - [0, *id002, height]
  - [1, *id002, width]
  requiredArguments: null
exit: {argumentInfo: null, help: exits the program, optionalArguments: null, requiredArguments: null}
gen-verification: {argumentInfo: null, help: 'Updates the verification sum of the
    loaded matrix ', optionalArguments: null, requiredArguments: null}
head:
  argumentInfo: [the path to the file to get the head of, the number of lines to print
      from the file]
  help: Prints the first lines (10 by default) lines of the file
  optionalArguments:
  - [0, *id002, lines]
  requiredArguments:
  - [0, *id001, path]
help:
  argumentInfo: [specific command to retrieve help for]
  help: "Prints help for all commands, or prints the help for the \n            command\
    \ specified in the first argument"
  optionalArguments:
  - [0, *id001, command]
  requiredArguments: null
info: {argumentInfo: null, help: Prints information about the loaded matrix, optionalArguments: null,
  requiredArguments: null}
init:
  argumentInfo: [the width for the new matrix, the height for the new matrix, the
      value for all elements in the new matrix]
  help: "Creates a new matrix with specified dimensions, with all \n             \
    \   elements initialized to zero, or to val if it is given"
  optionalArguments:
  - [0, &id003 !!python/name:builtins.float '', val]
  requiredArguments:
  - [0, *id002, with]
  - [1, *id002, height]
load:
  argumentInfo: [The file to load, The format of said file]
  help: Reads in the file for viewing and manipulation
  optionalArguments: null
  requiredArguments:
  - [0, *id001, path]
  - [1, *id001, format]
ls:
  argumentInfo: [the path to get a listing for - default is ./]
  help: Prints a directory listing for the specified path
  optionalArguments:
  - [0, *id001, path]
  requiredArguments: null
paint:
  argumentInfo: [column of top-left corner, row of top-left corner, column of bottom-right
      corner, row of bottom-right corner, new value for elements]
  help: "Modifies the values of the rectangular range of elements \n        \t\twhose\
    \ top-left corner is (col1, row1) and whose bottom right \n        \t\tcorner\
    \ is (col2, row2). If val is given, elements are set equal \n        \t\tval,\
    \ otherwise they are set to zero"
  optionalArguments:
  - [0, *id003, val]
  requiredArguments:
  - [0, *id002, col1]
  - [1, *id002, row1]
  - [2, *id002, col2]
  - [3, *id002, row2]
paint-diag:
  argumentInfo: [the first column of the diagonal, last column of the diagonal, number
      of indices on each side of the diagonal to paint, value to paint, number of
      indices to offset the diagonal horizontally]
  help: "sets all elements along the diagonal of the matrix to val, as\n         \
    \       well as spread values to either side of the diagonal, starting \n    \
    \            column begin, and ending with column end. The diagonal can also \n\
    \                be offset by offset elements to the left or right "
  optionalArguments:
  - [0, *id002, offset]
  requiredArguments:
  - [0, *id002, begin]
  - [1, *id002, end]
  - [2, *id002, spread]
  - [3, *id003, val]
plot: {argumentInfo: null, help: Plots the matrix graphically with matplotlib, optionalArguments: null,
  requiredArguments: null}
pwd: {argumentInfo: null, help: Prints the current working directory, optionalArguments: null,
  requiredArguments: null}
range:
  argumentInfo: [column of top-left corner, row of top-left corner, column of bottom-right
      corner, row of bottom-right corner]
  help: Displays all elements in the rectangular region given by (row1, col1), (row2,
    col2)
  optionalArguments: null
  requiredArguments:
  - [0, *id002, col1]
  - [1, *id002, row1]
  - [2, *id002, col2]
  - [3, *id002, row2]
raw: {argumentInfo: null, help: display the raw COO format data for the matrix, optionalArguments: null,
  requiredArguments: null}
rmzeros: {argumentInfo: null, help: "Removes zero elements from the matrix (only affects\
    \ COO\n                    data not the contents of the matrix)", optionalArguments: null,
  requiredArguments: null}
row:
  argumentInfo: [the row to display]
  help: Displays all elements in the specified row
  optionalArguments: null
  requiredArguments:
  - [0, *id002, row]
row-major: {argumentInfo: null, help: "Makes the matrix row-major (only affects COO\
    \ data, not\n                    the contents of the matrix)", optionalArguments: null,
  requiredArguments: null}
setdims:
  argumentInfo: [the new width for the matrix, the new height for the matrix]
  help: Changes the dimensions of the matrix, truncating elements which become out
    of bounds
  optionalArguments: null
  requiredArguments:
  - [0, *id002, with]
  - [1, *id002, height]
setsym:
  argumentInfo: [the new symmetry for the matrix, the algorithm to use]
  help: " Makes the matrix symmetric or asymmetric, modifying COO \n            \t\
    \tdata appropriately. By default, uses the truncate method. \n            \t\t\
    Available methods are: truncate - fastest, all elements from\n            \t\t\
    the bottom triangle are removed/overwritten as needed; add -\n            \t\t\
    all elements in in the lower triangle are added to \n            \t\tcorresponding\
    \ elements in the upper triangle (asym->sym) OR \n            \t\tall elements\
    \ in the upper triangle are added to the \n            \t\tcorresponding elements\
    \ in the lower (sym->asym); smart - \n            \t\tonly overwrites values with\
    \ are zero, very slow"
  optionalArguments:
  - [0, *id001, method]
  requiredArguments:
  - [0, *id001, symmetry]
shell: {argumentInfo: null, help: 'Drop to Python debugging shell. WARNING: INTENDED
    FOR DEBUGGING USE ONLY', optionalArguments: null, requiredArguments: null}
touch:
  argumentInfo: [the column of the target element, the row of the target element,
    the new value for the element]
  help: Modifies the value of the matrix at the specified row and col
  optionalArguments: null
  requiredArguments:
  - [0, *id002, col]
  - [1, *id002, row]
  - [2, *id003, val]
transpose: {argumentInfo: null, help: Reflects the matrix about the diagonal, optionalArguments: null,
  requiredArguments: null}
value:
  argumentInfo: [column of desired element, row of desired element]
  help: display the value at column, row
  optionalArguments: null
  requiredArguments:
  - [0, *id002, column]
  - [1, *id002, row]
write:
  argumentInfo: [The file to write to, The format of said file]
  help: "Writes current matrix to specified file, in specified format\n         note\
    \ that the given path should include the desired file extension"
  optionalArguments: null
  requiredArguments:
  - [0, *id001, path]
  - [1, *id001, format]
